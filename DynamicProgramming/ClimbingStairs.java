import java.util.*;public class ClimbingStairs{	public static void main(String args[]){		Scanner in = new Scanner(System.in);		int n  = in.nextInt();		int k = in.nextInt();		int []dp = new int[n+1];		Arrays.fill(dp,-1);		int ans1 = recur(0,k,n,dp);		int ans2 = bottom_up1(n,k);		int ans3 = bottom_up2(n,k);		System.out.println(" ans 1: "+ans1);		System.out.println(" ans2 : "+ans2);		System.out.println(" ans3 : "+ans3);	}	//Time complexity is O(N*K)	public static int recur(int index,int k,int n,int []dp){		if(index==n)return 1;		if(index>n)return 0;		if(dp[index]!=-1)return dp[index];		int ret = 0;		for(int i=1;i<=k;++i){			ret+=recur(index+i,k,n,dp);		}		return dp[index] = ret;	}	//buttom up Approch : Time complexity is O(N*K)	public static int bottom_up1(int n,int k){		int []dp = new int[n+1];		dp[0] = 1;		for(int i=1;i<=n;++i){			for(int j=i-1;j>=0&&((i-j)<=k);--j){				dp[i] +=dp[j];			}		}		return dp[n];	}	//buttom up Approch : Time complexity is O(N)	public static int bottom_up2(int n,int k){		int []dp = new int[n+1];		dp[0] = 1;		dp[1] = 1;		for(int i=2;i<=n;++i){			dp[i] = 2*dp[i-1]-((i-k-1)>=0?dp[i-k-1]:0);		}		return dp[n];	}}